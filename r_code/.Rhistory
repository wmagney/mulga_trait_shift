summary(final.height.basal.lm)
qqnorm(residuals(final.height.basal.lm), pch = 1, frame = FALSE)
qqline(residuals(final.height.basal.lm), col = "steelblue", lwd = 2)
scatter.smooth(residuals(final.height.basal.lm) ~ fitted(final.height.basal.lm))
vif(final.height.basal.lm)
# Extract the residuals from the model
height.basal.residuals <- residuals(final.height.basal.lm)
# Perform the ACF analysis
acf(height.basal.residuals)
# null vs fit
final.height.basal.aov <- lmer(log(height) ~ log(basal_area) * rainfall + (1|landform/plots/subplot) , data = f.D2H_model, REML = F)
final.height.null <- lmer(log(height) ~ log(basal_area) + (1|landform/plots/subplot), data = f.D2H_model, REML = F)
anova(final.height.null,final.height.basal.aov,test = "LRT")
#test if we need landform given we have plots as a random effect
nBoot <- 1000
lrStat <- rep(NA, nBoot)
final.height.basal.null <- lmer(log(height) ~ log(basal_area) * rainfall + (1|plots/subplot) , data = f.D2H_model, REML = F) #null model
final.height.basal.aov <- lmer(log(height) ~ log(basal_area) * rainfall + (1|landform/plots/subplot) , data = f.D2H_model, REML = F) # full model
lrObs <- 2 * logLik(final.height.basal.aov) - 2 * logLik(final.height.basal.null) # observed test stat
for (iBoot in 1:nBoot)
{
f.D2H_model$logHeightSim <- unlist(simulate(final.height.basal.null)) # resampled data
bNull <- lmer(logHeightSim ~ log(basal_area) * rainfall + (1 | plots/subplot), data = f.D2H_model, REML = F) # null model
bAlt <- lmer(logHeightSim ~ log(basal_area) * rainfall + (1 | landform/plots/subplot), data = f.D2H_model, REML = F) # full model
lrStat[iBoot] <- 2 * logLik(bAlt) - 2 * logLik(bNull) # resampled test stat
}
mean(lrStat > lrObs) # P-value for test of landform effect
#test if we need subplots given we have plots as a random effect
nBoot <- 1000
lrStat <- rep(NA, nBoot)
final.height.basal.null <- lmer(log(height) ~ log(basal_area) * rainfall + (1|plots) , data = f.D2H_model, REML = F)
final.height.basal.aov <- lmer(log(height) ~ log(basal_area) * rainfall + (1|plots/subplot) , data = f.D2H_model, REML = F) # full model
lrObs <- 2 * logLik(final.height.basal.aov) - 2 * logLik(final.height.basal.null) # observed test stat
for (iBoot in 1:nBoot)
{
f.D2H_model$logHeightSim <- unlist(simulate(final.height.basal.null)) # resampled data
bNull <- lmer(logHeightSim ~ log(basal_area) * rainfall + (1 | plots), data = f.D2H_model, REML = F) # null model
bAlt <- lmer(logHeightSim ~ log(basal_area) * rainfall + (1 |plots/subplot), data = f.D2H_model, REML = F) # full model
lrStat[iBoot] <- 2 * logLik(bAlt) - 2 * logLik(bNull) # resampled test stat
}
mean(lrStat > lrObs) # P-value for test of plots effect
final.height.basal.lm <- lmer(log(height) ~ log(basal_area) * rainfall + (1|plots/subplot) , data = f.D2H_model, REML = T)
summary(final.height.basal.lm)
pairs(emmeans(final.height.basal.lm, ~  rainfall))
basal.vs.heigh_plots <- f.D2H_model%>%
ggplot(aes(basal_area, height, colour = rainfall))+
geom_point(aes(shape = landform))+
geom_smooth(method = "nls",
formula = y ~ c*x^z,
se = FALSE,
method.args = list(start = list(c=125, z=0.383739)))+
ylab("height (cm)")+
xlab(bquote("basal area " (cm^2)))+
xlim(c(NA, 1250))+
ggtitle("a")+
theme_cowplot()+
theme(axis.title=element_text(size=12), legend.position = "none")
print(basal.vs.heigh_plots)
final.tree.height.lm <- lmer(log(height) ~  rainfall + (1|landform/plots/subplot), data = f.D2H_model, REML = T)
summary(final.tree.height.lm)
qqnorm(residuals(final.tree.height.lm), pch = 1, frame = FALSE)
qqline(residuals(final.tree.height.lm), col = "steelblue", lwd = 2)
scatter.smooth(residuals(final.tree.height.lm) ~ fitted(final.tree.height.lm))
# Extract the residuals from the model
residuals <- residuals(final.tree.height.lm)
# Perform the ACF analysis
acf(residuals)
final.tree.height.lm <- lmer(log(height) ~ rainfall + (1|landform/plots/subplot) , data = f.D2H_model, REML = F)
final.tree.height.null <- lmer(log(height) ~  (1|landform/plots/subplot) , data = f.D2H_model, REML = F)
anova(final.tree.height.null,final.tree.height.lm,test = "LRT")
final.canopy.height.fit <- lmer(log.canopy.V ~ log.tree.H + rainfall + (1|landform), data = canopy_volume, REML = T)
summary(final.canopy.height.fit)
qqnorm(residuals(final.canopy.height.fit ), pch = 1, frame = FALSE)
qqline(residuals(final.canopy.height.fit ), col = "steelblue", lwd = 2)
scatter.smooth(residuals(final.canopy.height.fit ) ~ fitted(final.canopy.height.fit ))
# Extract the residuals from the model
cv.residuals <- residuals(final.canopy.height.fit )
# Perform the ACF analysis
acf(cv.residuals)
vif(final.canopy.height.fit)
``
vif(final.canopy.height.fit)
# significance of rainfall
final.canopy.height.fit <- lmer(log.canopy.V ~ log.tree.H + rainfall + (1|landform), data = canopy_volume, REML = F)
final.canopy.height.null <- lmer(log.canopy.V ~ log.tree.H + (1|landform), data = canopy_volume, REML = T)
anova(final.canopy.height.null,final.canopy.height.fit,test = "LRT")
# significance of height
final.canopy.height.fit <- lmer(log.canopy.V ~ log.tree.H + rainfall + (1|landform), data = canopy_volume, REML = F)
final.canopy.height.null <- lmer(log.canopy.V ~ rainfall + (1|landform), data = canopy_volume, REML = T)
anova(final.canopy.height.null,final.canopy.height.fit,test = "LRT")
# significance of interaction effect
final.canopy.height.fit <- lmer(log.canopy.V ~ log.tree.H * rainfall + (1|landform), data = canopy_volume, REML = F)
final.canopy.height.null <- lmer(log.canopy.V ~ log.tree.H + rainfall + (1|landform), data = canopy_volume, REML = T)
anova(final.canopy.height.null,final.canopy.height.fit,test = "LRT")
#test if we need landform as a random effect
nBoot <- 1000
lrStat <- rep(NA, nBoot)
final.canopy.height.null <- aov(log.canopy.V ~ log.tree.H + rainfall, data = canopy_volume) #null w/o random effect
final.canopy.height.fit <- lmer(log.canopy.V ~ log.tree.H + rainfall + (1|landform), data = canopy_volume, REML = F) # full model
lrObs <- 2 * logLik(final.canopy.height.fit) - 2 * logLik(final.canopy.height.null) # observed test stat
for (iBoot in 1:nBoot)
{
canopy_volume$logCanopySim <- unlist(simulate(final.canopy.height.null)) # resampled data
bNull <- aov(logCanopySim ~ log.tree.H + rainfall, data = canopy_volume) # null model
bAlt <- lmer(logCanopySim ~ log.tree.H + rainfall + (1 |landform), data = canopy_volume, REML = F) # full model
lrStat[iBoot] <- 2 * logLik(bAlt) - 2 * logLik(bNull) # resampled test stat
}
mean(lrStat > lrObs) # P-value for test of landform effect
final.canopy.height.aov <- aov(log.canopy.V ~ log.tree.H + rainfall, data = canopy_volume)
vif(final.canopy.height.aov)
# Extract the residuals from the model
cv.residuals <- residuals(final.canopy.height.aov)
# Perform the ACF analysis
acf(cv.residuals)
final.canopy.height.aov <- aov(log.canopy.V ~ log.tree.H * rainfall, data = canopy_volume)
Anova(final.canopy.height.aov, type="III")
final.canopy.height.aov <- aov(log.canopy.V ~ log.tree.H + rainfall, data = canopy_volume)
Anova(final.canopy.height.aov, type="III")
TukeyHSD(final.canopy.height.aov, "rainfall")
canopyvsheight <- canopy_volume%>%
ggplot( aes( tree_height, canopy_volume * 1000000, colour = rainfall))+
geom_point(aes(shape = landform))+
geom_smooth(method = "nls",
formula = y ~b +x^m,
se = F,
method.args = list(start = list(m=3, b=0)))+
ggtitle("b")+
xlab("height (m)")+
ylab(bquote("canopy volume  " (cm^3)))+
theme_cowplot()
theme(legend.position = "none",
axis.title=element_text(size=12))
print(canopyvsheight)
final.canopy.basal.fit <- lmer(log.canopy.V ~ log.basal_area + rainfall + (1|landform), data = canopy_volume, REML = T)
summary(final.canopy.basal.fit)
qqnorm(residuals(final.canopy.basal.fit ), pch = 1, frame = FALSE)
qqline(residuals(final.canopy.basal.fit ), col = "steelblue", lwd = 2)
scatter.smooth(residuals(final.canopy.basal.fit ) ~ fitted(final.canopy.basal.fit ))
# Extract the residuals from the model
cb.residuals <- residuals(final.canopy.basal.fit )
# Perform the ACF analysis
acf(cb.residuals)
vif(final.canopy.basal.fit)
final.canopy.basal.fit <- lmer(log.canopy.V ~ log.basal_area + rainfall + (1|landform), data = canopy_volume, REML = F)
final.canopy.basal.null <- lmer(log.canopy.V ~ log.basal_area + (1|landform), data = canopy_volume, REML = F)
anova(final.canopy.basal.null,final.canopy.basal.fit,test = "LRT")
final.canopy.basal.null <- lmer(log.canopy.V ~ rainfall + (1|landform), data = canopy_volume, REML = F)
anova(final.canopy.basal.null,final.canopy.basal.fit,test = "LRT")
basalvscanopy <- canopy_volume%>%
ggplot( aes( basal_area, canopy_volume, colour = rainfall))+
geom_point(aes(shape = landform))+
geom_smooth(method = "nls",
formula = y ~ b + x^m,
se = FALSE,
method.args = list(start = list(b= 0.4660558, m = 1.13)))+
ylab(bquote("canopy volume " (m^3)))+
xlab(bquote("basal area " (cm^2)))+
ggtitle("c")+
theme_cowplot()+
theme(axis.title=element_text(size=12,face="bold"))+
theme(legend.position = "none")
print(basalvscanopy)
#create subplot level statistics
plot_D2h <- D2H_model%>%
group_by( subplot )%>%
summarise(
sub_plot_area = mean(sub_plot_area),
subplot_density = mean(subplot_density),
ave.basal = mean(basal_area),
diameter = mean(diamiter),
ave.height = mean(height),
tot.basal = sum(basal_area),
tot.height = sum(height),
stem_area = mean(3.1415/4*diamiter^2),
basal.m2 = tot.basal/sub_plot_area,
height.m2 = tot.height/sub_plot_area,
plots = first(plots),
plot_density = mean(plot_density),
rainfall = first(rainfall),
landform = first(landform))%>%
ungroup()%>%
mutate(
logbasal.m2 = log(basal.m2),
log.sub.dens = log(subplot_density))
summary(plot_D2h)
#compare main effects to interactive model
final.plot.basal.fit <- lmer(logbasal.m2 ~ rainfall + (1|landform/plots), data = plot_D2h, REML = T)
summary(final.plot.basal.fit)
qqnorm(residuals(final.plot.basal.fit), pch = 1, frame = FALSE)
qqline(residuals(final.plot.basal.fit), col = "steelblue", lwd = 2)
scatter.smooth(residuals(final.plot.basal.fit) ~ fitted(final.plot.basal.fit))
# Extract the residuals from the model
residuals <- residuals(final.plot.basal.fit)
# Perform the ACF analysis
acf(residuals)
final.plot.basal.fit <- lmer(logbasal.m2 ~ rainfall +  (1|landform/plots), data = plot_D2h, REML = F)
final.plot.basal.null <- lmer(logbasal.m2 ~ (1|landform/plots), data = plot_D2h, REML = F)
anova(final.plot.basal.null,final.plot.basal.fit,test = "LRT")
#test if we need landform given we have plots as a random effect
nBoot <- 1000
lrStat <- rep(NA, nBoot)
final.plot.basal.null <- lmer(logbasal.m2 ~ rainfall +  (1|plots), data = plot_D2h, REML = F) #null w/o random effect
final.plot.basal.fit <- lmer(logbasal.m2 ~  rainfall + (1|landform/plots), data = plot_D2h, REML = F) # full model
lrObs <- 2 * logLik(final.plot.basal.fit) - 2 * logLik(final.plot.basal.null) # observed test stat
for (iBoot in 1:nBoot)
{
plot_D2h$logBasalSim <- unlist(simulate(final.plot.basal.null)) # resampled data
bNull <- lmer(logBasalSim ~ rainfall +  (1|plots), data = plot_D2h, REML = F) # null model
bAlt <- lmer(logBasalSim ~  rainfall + (1|landform/plots), data = plot_D2h, REML = F) # full model
lrStat[iBoot] <- 2 * logLik(bAlt) - 2 * logLik(bNull) # resampled test stat
}
mean(lrStat > lrObs) # P-value for test of landform effect
#test if we need  plots as a random effect
nBoot <- 1000
lrStat <- rep(NA, nBoot)
final.plot.basal.null <- aov(logbasal.m2 ~ rainfall, data = plot_D2h) #null w/o random effect
final.plot.basal.fit <- lmer(logbasal.m2 ~  rainfall + (1|plots), data = plot_D2h, REML = F) # full model
lrObs <- 2 * logLik(final.plot.basal.fit) - 2 * logLik(final.plot.basal.null) # observed test stat
for (iBoot in 1:nBoot)
{
plot_D2h$logBasalSim <- unlist(simulate(final.plot.basal.null)) # resampled data
bNull <- aov(logBasalSim ~ rainfall, data = plot_D2h) # null model
bAlt <- lmer(logBasalSim ~  rainfall + (1|plots), data = plot_D2h, REML = F) # full model
lrStat[iBoot] <- 2 * logLik(bAlt) - 2 * logLik(bNull) # resampled test stat
}
mean(lrStat > lrObs) # P-value for test of plots effect
final.plot.basal.fit <- lmer(logbasal.m2 ~  rainfall + (1|plots), data = plot_D2h, REML = F)
summary(final.plot.basal.fit)
pairs(emmeans(final.plot.basal.fit, ~  rainfall))
stands_boimass <-plot_D2h %>%
ggplot(aes( rainfall, basal.m2, fill = rainfall))+
geom_boxplot(notch = F)+
scale_y_log10()+
ylab(bquote("basal area "(cm^2 ~ m^-2)))+
xlab( "")+
ggtitle("a")+
theme_cowplot()+
theme(legend.position = "none")
print(stands_boimass)
#compare main effects to interactive model
final.plot.height.fit <- lmer(log(height.m2) ~ rainfall + (1|landform/plots), data = plot_D2h, REML = T)
summary(final.plot.height.fit)
qqnorm(residuals(final.plot.height.fit), pch = 1, frame = FALSE)
qqline(residuals(final.plot.height.fit), col = "steelblue", lwd = 2)
scatter.smooth(residuals(final.plot.height.fit) ~ fitted(final.plot.height.fit))
# Extract the residuals from the model
residuals <- residuals(final.plot.height.fit)
# Perform the ACF analysis
acf(residuals)
final.plot.height.fit <- lmer(log(height.m2) ~ rainfall +  (1|landform/plots), data = plot_D2h, REML = F)
final.plot.height.null <- lmer(log(height.m2) ~ (1|landform/plots), data = plot_D2h, REML = F)
anova(final.plot.height.null,final.plot.height.fit,test = "LRT")
stands_boimass <-plot_D2h %>%
ggplot(aes( rainfall, height.m2, fill = rainfall))+
geom_boxplot(notch = F)+
scale_y_log10()+
ylab(bquote("height "(m ~ m^-2)))+
xlab( "")+
ggtitle("b")+
theme_cowplot()+
theme(legend.position = "none")
print(stands_boimass)
final.density.fit <- lmer(log.sub.dens ~ rainfall + (1|landform/plots), data = plot_D2h, REML = F)
summary(final.density.fit)
qqnorm(residuals(final.density.fit), pch = 1, frame = FALSE)
qqline(residuals(final.density.fit), col = "steelblue", lwd = 2)
scatter.smooth(residuals(final.density.fit) ~ fitted(final.density.fit))
# Extract the residuals from the model
dens.residuals <- residuals(final.density.fit)
# Perform the ACF analysis
acf(dens.residuals)
final.density.fit <- lmer(log.sub.dens ~ rainfall +  (1|landform/plots), data = plot_D2h, REML = F)
final.density.null <- lmer(log.sub.dens ~ (1|landform/plots), data = plot_D2h, REML = F)
anova(final.density.fit,final.density.null,test = "LRT")
#test if we need landform given we have plots as a random effect
nBoot <- 1000
lrStat <- rep(NA, nBoot)
final.density.null <- lmer(log.sub.dens ~ rainfall +  (1|plots), data = plot_D2h, REML = F) #null w/o random effect
final.density.fit <- lmer(log.sub.dens ~  rainfall + (1|landform/plots), data = plot_D2h, REML = F) # full model
lrObs <- 2 * logLik(final.density.fit) - 2 * logLik(final.density.null) # observed test stat
for (iBoot in 1:nBoot)
{
plot_D2h$logdensitySim <- unlist(simulate(final.density.null)) # resampled data
bNull <- lmer(logdensitySim ~ rainfall +  (1|plots), data = plot_D2h, REML = F) # null model
bAlt <- lmer(logdensitySim ~  rainfall + (1|landform/plots), data = plot_D2h, REML = F) # full model
lrStat[iBoot] <- 2 * logLik(bAlt) - 2 * logLik(bNull) # resampled test stat
}
mean(lrStat > lrObs) # P-value for test of landform effect
#test if we need plots as a random effect
nBoot <- 1000
lrStat <- rep(NA, nBoot)
final.density.null <- aov(log.sub.dens ~ rainfall, data = plot_D2h) #null w/o random effect
final.density.fit <- lmer(log.sub.dens ~ rainfall +  (1|plots), data = plot_D2h, REML = F) # full model
lrObs <- 2 * logLik(final.density.fit) - 2 * logLik(final.density.null) # observed test stat
for (iBoot in 1:nBoot)
{
plot_D2h$logdensitySim <- unlist(simulate(final.density.null)) # resampled data
bNull <- aov(log.sub.dens ~ rainfall, data = plot_D2h) # null model
bAlt <- lmer(logdensitySim ~  rainfall + (1|plots), data = plot_D2h, REML = F) # full model
lrStat[iBoot] <- 2 * logLik(bAlt) - 2 * logLik(bNull) # resampled test stat
}
mean(lrStat > lrObs) # P-value for test of plots effect
final.density.aov <- aov(log.sub.dens ~ rainfall, data = spatial_plot_D2h)
final.density.fit <- lmer(log.sub.dens ~ rainfall + (1|plots), data = plot_D2h, REML = F)
pairs(emmeans(final.density.fit, ~ rainfall))
final.density.fit <- lmer(log.sub.dens ~ rainfall + (1|plots), data = plot_D2h, REML = F)
pairs(emmeans(final.density.fit, ~ rainfall))
# Extract the residuals from the model
dens.residuals.fit <- residuals(final.density.fit)
# Perform the ACF analysis
acf(dens.residuals.fit)
final.tree.density <- plot_D2h%>%
ggplot(aes(rainfall, subplot_density, fill = rainfall))+
geom_boxplot()+
scale_y_log10()+
ylab(bquote("tree density "(trees ~ m^-2)))+
xlab(" ")+
ggtitle("b")+
theme_cowplot()+
theme(legend.position = "none")
print(final.tree.density)
final.add.competition.model <- lmer(log.sub.dens ~ log(ave.basal) + rainfall + (1|landform /plots), data = plot_D2h, REML = T)
summary(final.add.competition.model)
vif(final.add.competition.model)
# Extract the residuals from the model
ave.treebio.residuals.fit <- residuals(final.add.competition.model)
# Perform the ACF analysis
acf(ave.treebio.residuals.fit)
scatter.smooth(residuals(final.add.competition.model) ~ fitted(final.add.competition.model))
# test significance of rainfall
final.rainfall.competition.model <- lmer(log.sub.dens ~ log(ave.basal) + rainfall + (1|landform/plots), data = plot_D2h, REML = F)
final.rainfall.competition.null <- lmer(log.sub.dens ~ log(ave.basal) + (1|landform/plots), data = plot_D2h, REML = F)
anova(final.rainfall.competition.null, final.rainfall.competition.model)
# significance of ave.basal
final.rainfall.competition.null <- lmer(log.sub.dens ~  rainfall + (1|landform/plots), data = plot_D2h, REML = F)
anova(final.rainfall.competition.null, final.rainfall.competition.model)
#test if we need landform given we have plots as a random effect
nBoot <- 1000
lrStat <- rep(NA, nBoot)
final.rainfall.compeition.null <- lmer(log.sub.dens ~ log(ave.basal) + rainfall + (1|plots), data = plot_D2h, REML = F) #null w/o random effect
final.final.competition.model <- lmer(log.sub.dens ~  log(ave.basal) + rainfall + (1|landform/plots), data = plot_D2h, REML = F) # full model
lrObs <- 2 * logLik(final.final.competition.model) - 2 * logLik(final.rainfall.compeition.null) # observed test stat
for (iBoot in 1:nBoot)
{
plot_D2h$logDensitySim <- unlist(simulate(final.rainfall.compeition.null)) # resampled data
bNull <- lmer(logDensitySim ~ log(ave.basal) + rainfall +  (1|plots), data = plot_D2h, REML = F) # null model
bAlt <- lmer(logDensitySim ~ log(ave.basal) + rainfall + (1|landform/plots), data = plot_D2h, REML = F) # full model
lrStat[iBoot] <- 2 * logLik(bAlt) - 2 * logLik(bNull) # resampled test stat
}
mean(lrStat > lrObs) # P-value for test of landform effect
nBoot <- 1000
lrStat <- rep(NA, nBoot)
final.rainfall.compeition.null <- aov(log.sub.dens ~ log(ave.basal) + rainfall, data = plot_D2h) #null w/o random effect
final.final.competition.model <- lmer(log.sub.dens ~  log(ave.basal) + rainfall + (1|plots), data = plot_D2h, REML = F) #full model
lrObs <- 2 * logLik(final.final.competition.model) - 2 * logLik(final.rainfall.compeition.null) # observed test stat
for (iBoot in 1:nBoot)
{
plot_D2h$logDensitySim <- unlist(simulate(final.rainfall.compeition.null)) # resampled data
bNull <- aov(logDensitySim ~ log(ave.basal) + rainfall, data = plot_D2h) # null model
bAlt <- lmer(logDensitySim ~ log(ave.basal) + rainfall + (1|landform/plots), data = plot_D2h, REML = F) # full model
lrStat[iBoot] <- 2 * logLik(bAlt) - 2 * logLik(bNull) # resampled test stat
}
mean(lrStat > lrObs) # P-value for test of plot effect
final.rainfall.compeition.model <- aov(log.sub.dens ~ log(ave.basal) + rainfall, data = plot_D2h)
anova(final.rainfall.compeition.model)
TukeyHSD(final.rainfall.compeition.model, "rainfall")
plot_D2h%>%
ggplot( aes(ave.basal, subplot_density, colour = rainfall))+
geom_point(aes(shape = landform))+
geom_smooth(method = "lm", se = F)+
ylab(bquote("tree density "(tree/m^2)))+
xlab(bquote("average tree basal area " (cm^2/subplot)))+
theme_cowplot()+
theme(legend.position = "none")+
scale_y_log10()+
scale_x_log10()
# Extract the residuals from the model
ave.treebio.residuals.fit <- residuals(final.rainfall.compeition.model)
# Perform the ACF analysis
acf(ave.treebio.residuals.fit)
vif(final.rainfall.compeition.model)
plot_D2h%>%
ggplot( aes(ave.basal, subplot_density, colour = rainfall))+
geom_point(aes(shape = landform))+
geom_smooth(method = "lm", se = F)+
ylab(bquote("tree density "(tree/m^2)))+
xlab(bquote("individual tree biomass " (kg/subplot)))+
theme_cowplot()+
theme(legend.position = "none")+
scale_y_log10()+
scale_x_log10()
scatter.smooth(residuals(area.model) ~ fitted(area.model))
# using the accacia allometric equation from feller 1980 we will calculate biomass for each tree based on a "stem by stem" analysis.
# see "Review of Allometric Relationships for Estimating Woody Biomass for New South Wales, the Australian Capital Territory, Victoria, Tasmania and South Australia" (page 36)
D2H_model <- basal_area %>%
group_by(tree, height, landform, plots, rainfall, subplot, sub_plot_area, subplot_density, plot_density)%>%
summarise(basal_area = sum(basal_area),.groups = "drop")%>%
mutate(diamiter = (sqrt(basal_area/3.14159265359))*2)
library(lme4) #mixed effect linear models
library(lmerTest)
library(emmeans)
library(tidyverse)
library(readr)
library(nlme)
library(ggpmisc)
library(cowplot)
library(car)
library(forcats)
library(mgcv)
library(glmmLasso)
library (glmmTMB)
library(sp)
library(gstat)
library(ape)
library(ggpmisc)
library(multcomp)
library(MASS)
library(betareg)
library(glmmTMB)
total_plots <- read_csv("plot_data/total_plots.csv")%>%
mutate(
landform = as.factor(landform),
plots = as.factor(plots),
subplot = as.factor(subplot),
rainfall = factor(rainfall, levels = c("low", "moderate" , "high")))
summary(total_plots)
total_wood <- read_csv("~/Thesis/r_studio/trait_data/wood/total_wood.csv")%>%
mutate( rainfall = factor(rainfall, levels = c("low", "moderate", "high")))
summary(total_wood)
#calculate basal area
basal_area <- total_plots %>%
gather("d_10", "diamiter", starts_with ("d_"))%>%
mutate(basal_area = (diamiter*0.5)^2*3.14159265359)%>%
arrange(tree)%>%
filter(!is.na(diamiter))
# using the accacia allometric equation from feller 1980 we will calculate biomass for each tree based on a "stem by stem" analysis.
# see "Review of Allometric Relationships for Estimating Woody Biomass for New South Wales, the Australian Capital Territory, Victoria, Tasmania and South Australia" (page 36)
D2H_model <- basal_area %>%
group_by(tree, height, landform, plots, rainfall, subplot, sub_plot_area, subplot_density, plot_density)%>%
summarise(basal_area = sum(basal_area),.groups = "drop")%>%
mutate(diamiter = (sqrt(basal_area/3.14159265359))*2)
#filter out smaller trees due to allometeric differences in juveniles
f.D2H_model <- filter(D2H_model, diamiter > 2)
allometry_total <- read_csv("allometry/allometry_total.csv")%>%
mutate(
landform = as.factor(landform),
rainfall = factor(rainfall, levels = c( "low", "moderate", "high")))
summary(allometry_total)
#calcualte basal area
allo_basal <- allometry_total %>%
gather("d10", "diamiter", starts_with ("d10"))%>%
mutate(basal_area = (diamiter*0.5)^2*3.14159265359)%>%
arrange(tree)%>%
filter(!is.na(diamiter))
canopy_volume <- allo_basal%>%
group_by(tree, canopy_1, canopy_2, `95_Canopy`, tree_height, landform, rainfall)%>%
summarise(basal_area = sum(basal_area),.groups = "drop")%>%
mutate(canopy_height = ((tree_height - `95_Canopy`)/2),  # divide by 2 to get the semi-axis
canopy_length = canopy_1/2,
canopy_bredth = canopy_2/2,
canopy_volume = (3/4 * 3.141593 * canopy_height *canopy_bredth * canopy_length)/1000000,# volume of an ellipsoid. Divide by 1,000,000 to get m^3
log.tree.H = log(tree_height),
log.canopy.V = log(canopy_volume),
log.basal_area = log(basal_area))%>%
filter(!is.na(canopy_volume))%>%
filter(!is.na(log.canopy.V))
summary(allo_basal)
final.basal.fit <- lmer(log(basal_area) ~ rainfall + (1|landform/plots/subplot), data = f.D2H_model, REML = T)
summary(final.basal.fit)
qqnorm(residuals(final.basal.fit), pch = 1, frame = FALSE)
qqline(residuals(final.basal.fit), col = "steelblue", lwd = 2)
scatter.smooth(residuals(final.basal.fit) ~ fitted(final.basal.fit))
# Extract the residuals from the model
basal.residuals <- residuals(final.basal.fit)
# Perform the ACF analysis
acf(basal.residuals)
final.basal.fit <- lmer(log(basal_area) ~ rainfall + (1|landform/plots/subplot), data = f.D2H_model, REML = F)
final.basal.null <- lmer(log(basal_area) ~  (1| landform/plots/subplot), data = f.D2H_model, REML = F)
anova(final.basal.null, final.basal.fit, test = "LRT")
#test if we need landform given we have plots as a random effect
nBoot <- 1000
lrStat <- rep(NA, nBoot)
final.basal.null <- lmer(log(basal_area) ~  rainfall + (1|plots/subplot) , data = f.D2H_model, REML = F) #null model
final.basal.fit <- lmer(log(basal_area) ~ rainfall + (1|landform/plots/subplot) , data = f.D2H_model, REML = F) # full model
lrObs <- 2 * logLik(final.basal.fit) - 2 * logLik(final.basal.null) # observed test stat
for (iBoot in 1:nBoot)
{
f.D2H_model$logBasalSim <- unlist(simulate(final.basal.null)) # resampled data
bNull <- lmer(logBasalSim ~  rainfall + (1 | plots/subplot), data = f.D2H_model, REML = F) # null model
bAlt <- lmer(logBasalSim ~ rainfall + (1 | landform/plots/subplot), data = f.D2H_model, REML = F) # full model
lrStat[iBoot] <- 2 * logLik(bAlt) - 2 * logLik(bNull) # resampled test stat
}
mean(lrStat > lrObs) # P-value for test of landform effect
final.basal.fit <- lmer(log(basal_area) ~ rainfall + (1|plots/subplot) , data = f.D2H_model, REML = T)
summary(final.basal.fit)
pairs(emmeans(final.basal.fit, ~ "rainfall"))
f.D2H_model %>%
ggplot(aes(rainfall, basal_area, fill = rainfall))+
geom_boxplot( notch = F)+
scale_y_log10()+
ylab(bquote("basal area "(cm^2)))+
xlab(" ")+
theme_cowplot()+
theme(legend.position = "none",
axis.title=element_text(size=12))
qqnorm(residuals(final.height.basal.lm), pch = 1, frame = FALSE)
qqline(residuals(final.height.basal.lm), col = "steelblue", lwd = 2)
scatter.smooth(residuals(final.height.basal.lm) ~ fitted(final.height.basal.lm))
# Extract the residuals from the model
height.basal.residuals <- residuals(final.height.basal.lm)
# Perform the ACF analysis
acf(height.basal.residuals)
