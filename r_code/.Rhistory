filter(, area < 3000)%>%
filter(, area > 60)%>%
filter(, width > 3)%>%
#turn point values into area (pixel spacial resolution 1.17um across images on average with small variance (total range = 0.014um))
mutate(area = 1.17*area,
length = 1.17*length,
width = 1.17*width,
perimeter = 1.17*perimeter)
summary(vessels)
gamma.glmm.roundness <- glmmTMB(roundess ~ rainfall + (1|landform/tree), data = f.vessels,family = Gamma())
beta.glmm.roundness <- glmmTMB(roundess ~ rainfall  + (1|landform/tree), data = f.vessels,family = beta_family())
anova(gamma.glmm.roundness, beta.glmm.roundness, test = "LRT")
total_plots <- read_csv("plot_data/total_plots.csv")%>%
mutate(
landform = as.factor(landform),
plots = as.factor(plots),
subplot = as.factor(subplot),
rainfall = factor(rainfall, levels = c("low", "moderate" , "high")))
summary(total_plots)
total_wood <- read_csv("~/Thesis/r_studio/trait_data/wood/total_wood.csv")%>%
mutate( rainfall = factor(rainfall, levels = c("low", "moderate", "high")))
summary(total_wood)
#calculate basal area
basal_area <- total_plots %>%
gather("d_10", "diamiter", starts_with ("d_"))%>%
mutate(basal_area = (diamiter*0.5)^2*3.14159265359)%>%
arrange(tree)%>%
filter(!is.na(diamiter))
# using the accacia allometric equation from feller 1980 we will calculate biomass for each tree based on a "stem by stem" analysis.
# see "Review of Allometric Relationships for Estimating Woody Biomass for New South Wales, the Australian Capital Territory, Victoria, Tasmania and South Australia" (page 36)
D2H_model <- basal_area %>%
group_by(tree, height, landform, plots, rainfall, subplot, sub_plot_area, subplot_density, plot_density)%>%
summarise(basal_area = sum(basal_area),.groups = "drop")%>%
mutate(diamiter = (sqrt(basal_area/3.14159265359))*2)
#filter out smaller trees due to allometeric differences in juveniles
f.D2H_model <- filter(D2H_model, diamiter > 2)
allometry_total <- read_csv("allometry/allometry_total.csv")%>%
mutate(
landform = as.factor(landform),
rainfall = factor(rainfall, levels = c( "low", "moderate", "high")))
summary(allometry_total)
#calcualte basal area
allo_basal <- allometry_total %>%
gather("d10", "diamiter", starts_with ("d10"))%>%
mutate(basal_area = (diamiter*0.5)^2*3.14159265359)%>%
arrange(tree)%>%
filter(!is.na(diamiter))
canopy_volume <- allo_basal%>%
group_by(tree, canopy_1, canopy_2, `95_Canopy`, tree_height, landform, rainfall)%>%
summarise(basal_area = sum(basal_area),.groups = "drop")%>%
mutate(canopy_height = ((tree_height - `95_Canopy`)/2),  # divide by 2 to get the semi-axis
canopy_length = canopy_1/2,
canopy_bredth = canopy_2/2,
canopy_volume = (3/4 * 3.141593 * canopy_height *canopy_bredth * canopy_length)/1000000,# volume of an ellipsoid. Divide by 1,000,000 to get m^3
log.tree.H = log(tree_height),
log.canopy.V = log(canopy_volume),
log.basal_area = log(basal_area))%>%
filter(!is.na(canopy_volume))%>%
filter(!is.na(log.canopy.V))
summary(canopy_volume)
final.tree.height.lm <- lmer(log(height) ~  rainfall + (1|landform/plots/subplot), data = f.D2H_model, REML = T)
summary(final.tree.height.lm)
ggplot(f.D2H_model, aes(height, colour = rainfall)) +
geom_histogram()
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plot), data = f.D2H_model, family = Gamma())
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plot), data = f.D2H_model, family = poisson())
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model, family = Gamma())
summary(height.GLMM.gamma)
gamma.height.SimRes <- simulateResiduals(fittedModel  = height.GLMM.gamma)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model, family = glm.nb())
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model, family = glm.nb())
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model, family = Gamma())
summary(height.GLMM.gamma)
#calculate basal area
basal_area <- total_plots %>%
gather("d_10", "diamiter", starts_with ("d_"))%>%
mutate(basal_area = (diamiter*0.5)^2*3.14159265359)%>%
arrange(tree)%>%
filter(!is.na(diamiter))
# using the accacia allometric equation from feller 1980 we will calculate biomass for each tree based on a "stem by stem" analysis.
# see "Review of Allometric Relationships for Estimating Woody Biomass for New South Wales, the Australian Capital Territory, Victoria, Tasmania and South Australia" (page 36)
D2H_model <- basal_area %>%
group_by(tree, height, landform, plots, rainfall, subplot, sub_plot_area, subplot_density, plot_density)%>%
summarise(basal_area = sum(basal_area),.groups = "drop")%>%
mutate(diamiter = (sqrt(basal_area/3.14159265359))*2)
#filter out smaller trees due to allometeric differences in juveniles
f.D2H_model <- filter(D2H_model, diamiter > 2)
#filter out smaller trees due to allometeric differences in juveniles
f.D2H_model <- filter(D2H_model, diamiter > 2)
summary(f.D2H_model)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model, family = Gamma())
summary(height.GLMM.gamma)
View(f.D2H_model)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,
control = glmmTMBControl(rank_check = "adjust"),
family = Gamma())
summary(height.GLMM.gamma)
library(lme4) #mixed effect linear models
library(lmerTest)
library(emmeans)
library(tidyverse)
library(readr)
library(nlme)
library(ggpmisc)
library(cowplot)
library(car)
library(forcats)
library(mgcv)
library (glmmTMB)
library(sp)
library(gstat)
library(ape)
library(ggpmisc)
library(multcomp)
library(DHARMa)
library(MASS)
library(betareg)
library(glmmTMB)
total_plots <- read_csv("plot_data/total_plots.csv")%>%
mutate(
landform = as.factor(landform),
plots = as.factor(plots),
subplot = as.factor(subplot),
rainfall = factor(rainfall, levels = c("low", "moderate" , "high")))
summary(total_plots)
total_wood <- read_csv("~/Thesis/r_studio/trait_data/wood/total_wood.csv")%>%
mutate( rainfall = factor(rainfall, levels = c("low", "moderate", "high")))
summary(total_wood)
#calculate basal area
basal_area <- total_plots %>%
gather("d_10", "diamiter", starts_with ("d_"))%>%
mutate(basal_area = (diamiter*0.5)^2*3.14159265359)%>%
arrange(tree)%>%
filter(!is.na(diamiter))
# using the accacia allometric equation from feller 1980 we will calculate biomass for each tree based on a "stem by stem" analysis.
# see "Review of Allometric Relationships for Estimating Woody Biomass for New South Wales, the Australian Capital Territory, Victoria, Tasmania and South Australia" (page 36)
D2H_model <- basal_area %>%
group_by(tree, height, landform, plots, rainfall, subplot, sub_plot_area, subplot_density, plot_density)%>%
summarise(basal_area = sum(basal_area),.groups = "drop")%>%
mutate(diamiter = (sqrt(basal_area/3.14159265359))*2)
#filter out smaller trees due to allometeric differences in juveniles
f.D2H_model <- filter(D2H_model, diamiter > 2)
allometry_total <- read_csv("allometry/allometry_total.csv")%>%
mutate(
landform = as.factor(landform),
rainfall = factor(rainfall, levels = c( "low", "moderate", "high")))
summary(allometry_total)
#calcualte basal area
allo_basal <- allometry_total %>%
gather("d10", "diamiter", starts_with ("d10"))%>%
mutate(basal_area = (diamiter*0.5)^2*3.14159265359)%>%
arrange(tree)%>%
filter(!is.na(diamiter))
canopy_volume <- allo_basal%>%
group_by(tree, canopy_1, canopy_2, `95_Canopy`, tree_height, landform, rainfall)%>%
summarise(basal_area = sum(basal_area),.groups = "drop")%>%
mutate(canopy_height = ((tree_height - `95_Canopy`)/2),  # divide by 2 to get the semi-axis
canopy_length = canopy_1/2,
canopy_bredth = canopy_2/2,
canopy_volume = (3/4 * 3.141593 * canopy_height *canopy_bredth * canopy_length)/1000000,# volume of an ellipsoid. Divide by 1,000,000 to get m^3
log.tree.H = log(tree_height),
log.canopy.V = log(canopy_volume),
log.basal_area = log(basal_area))%>%
filter(!is.na(canopy_volume))%>%
filter(!is.na(log.canopy.V))
summary(canopy_volume)
final.basal.fit <- lmer(log(basal_area) ~ rainfall + (1|landform/plots/subplot), data = f.D2H_model, REML = T)
summary(final.basal.fit)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = Gamma)
summary(height.GLMM.gamma)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = Gamma())
summary(height.GLMM.gamma)
gamma.height.SimRes <- simulateResiduals(fittedModel  = height.GLMM.gamma)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = "nbinom2")
summary(height.GLMM.gamma)
gamma.height.SimRes <- simulateResiduals(fittedModel  = height.GLMM.gamma)
plot(gamma.height.SimRes)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = gamma())
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = Gamma())
summary(height.GLMM.gamma)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = gaussian())
summary(height.GLMM.gamma)
gamma.height.SimRes <- simulateResiduals(fittedModel  = height.GLMM.gamma)
plot(gamma.height.SimRes)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = poisson())
summary(height.GLMM.gamma)
gamma.height.SimRes <- simulateResiduals(fittedModel  = height.GLMM.gamma)
plot(gamma.height.SimRes)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = binomial())
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = "binomial")
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = glmer.nb())
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = glm.nb())
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = "glm.nb()")
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = "n.bionomial")
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = "nbinom2")
summary(height.GLMM.gamma)
gamma.height.SimRes <- simulateResiduals(fittedModel  = height.GLMM.gamma)
plot(gamma.height.SimRes)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = Gamma(link = "log"))
summary(height.GLMM.gamma)
gamma.height.SimRes <- simulateResiduals(fittedModel  = height.GLMM.gamma)
plot(gamma.height.SimRes)
# Extract the residuals from the model
residuals <- residuals(final.tree.height.lm)
scatter.smooth(residuals(final.tree.height.lm) ~ fitted(final.tree.height.lm))
final.tree.height.lm <- lmer(log(height) ~  rainfall + (1|landform/plots/subplot), data = f.D2H_model, REML = T)
summary(final.tree.height.lm)
scatter.smooth(residuals(final.tree.height.lm) ~ fitted(final.tree.height.lm))
# Extract the residuals from the model
residuals <- residuals(final.tree.height.lm)
# Perform the ACF analysis
acf(residuals)
ggplot(f.D2H_model, aes(height, colour = rainfall)) +
geom_histogram()
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = Gamma(link = "log"))
summary(height.GLMM.gamma)
gamma.height.SimRes <- simulateResiduals(fittedModel  = height.GLMM.gamma)
plot(gamma.height.SimRes)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots/landform), data = f.D2H_model,family = Gamma(link = "log"))
summary(height.GLMM.gamma)
gamma.height.SimRes <- simulateResiduals(fittedModel  = height.GLMM.gamma)
plot(gamma.height.SimRes)
## compare gamma regrassion to linear regression
anova(height.GLMM.gamma,final.tree.height.lm,test = "LRT")
lmem.roundness <- lmer(log.roundness ~ rainfall + (1|landform/tree), data = f.vessels)
lmem.roundness <- lmer(log.roundness ~ rainfall + landform + (1|tree), data = f.vessels)
lmem.roundness <- lmer(log.roundness ~ rainfall  + (1|landform/tree), data = f.vessels)
#Plant vessel's Data
#build data set
vessels <- read_csv("trait_data/vessel.csv")%>%
mutate(rainfalllow = ifelse (grepl ("STURT", name), "low", "moderate"),
rainfallhigh = ifelse (grepl ("GUNDA", name), "high", "moderate"),
landform = ifelse (grepl ("SHED", name), "shed", "acc"),
rainfall = ifelse(rainfalllow == "low", "low",
ifelse(rainfallhigh == "high", "high", "moderate")),
rainfall = as.factor(rainfall),
landform = as.factor(landform),
length = as.numeric(length),
width = as.numeric(width),
rainfall = factor(rainfall, levels = c("low", "moderate", "high")))%>%
#extract tree as a grouping factor from the name variable
mutate(
tree = substr(name, start = 1, stop = 13))%>%
#get log transformations of various variables
mutate(log.roundness = log(roundess),
log.area = log(area))
f.vessels <- vessels%>%
filter(, l_ratio > 0.20)%>%
filter(, roundess > 0.15)%>%
filter(, area < 3000)%>%
filter(, area > 60)%>%
filter(, width > 3)%>%
#turn point values into area (pixel spacial resolution 1.17um across images on average with small variance (total range = 0.014um))
mutate(area = 1.17*area,
length = 1.17*length,
width = 1.17*width,
perimeter = 1.17*perimeter)
summary(vessels)
#leaf data
total_leaves <- read_csv("trait_data/leaves/total_leaves.csv")%>%
mutate( rainfall = factor(rainfall, levels = c("low", "moderate", "high")))
summary(total_leaves)
trait_SLA <- total_leaves%>%
mutate(
tree_number = as.factor(tree_number),
#cm^2/mg
sla = leaf_area/leaf_mass,
volume = leaf_area * leaf_thickness
)%>%
arrange(tree_number)%>%
filter(!is.na(sla))%>%
aggregate(sla~tree_number + landform + volume + leaf_area + leaf_thickness  + leaf_mass + wood_density + rainfall,mean)
summary(trait_SLA)
# Wood density data
total_wood <- read_csv("~/Thesis/r_studio/trait_data/wood/total_wood.csv")%>%
mutate( rainfall = factor(rainfall, levels = c("low", "moderate", "high")))
summary(total_wood)
wood_data <- total_wood%>%
mutate(
basal_area = (wood_thickness*0.5)^2*3.14159265359,
volume = basal_area * wood_length,
wood.dens = wood_mass/volume)
summary(wood_data)
lmem.roundness <- lmer(log.roundness ~ rainfall  + (1|landform/tree), data = f.vessels)
summary(lmem.roundness)
lmem.roundness <- lmer(log.roundness ~ rainfall + landform + (1|tree), data = f.vessels)
summary(lmem.roundness)
scatter.smooth(residuals(lmem.roundness) ~ fitted(lmem.roundness))
qqnorm(residuals(lmem.roundness), pch = 1, frame = FALSE)
qqline(residuals(lmem.roundness), col = "steelblue", lwd = 2)
# Extract the residuals from the model
residuals <- residuals(lmem.roundness)
# Perform the ACF analysis
acf(residuals)
gamma.glmm.roundness <- glmmTMB(roundess ~ rainfall + (1|landform/tree), data = f.vessels,family = Gamma())
beta.glmm.roundness <- glmmTMB(roundess ~ rainfall  + (1|landform/tree), data = f.vessels,family = beta_family())
anova(gamma.glmm.roundness, beta.glmm.roundness, test = "LRT")
possion.glmm.roundness <- glmmTMB(roundess ~ rainfall + (1|landform/tree), data = f.vessels,family = poisson())
anova(beta.glmm.roundness, possion.glmm.roundness, test = "LRT")
lmem.roundness <- lmer(log.roundness ~ rainfall + (1|landform/tree), data = f.vessels)
beta.glmm.roundness <- glmmTMB(roundess ~ rainfall + (1|landform/tree), data = f.vessels, family = beta_family())
# Compare the models using likelihood ratio test (LRT)
anova(lmem.roundness, beta.glmm.roundness, test = "LRT")
# Print the results
AIC(beta.glmm.roundness, lmem.roundness)
## compare gamma regrassion to linear regression
anova(final.tree.height.lm, height.GLMM.gamma, test = "LRT")
## compare gamma regrassion to linear regression
anova(final.tree.height.lm, height.GLMM.gamma, test = "LRT")
AIC(height.GLMM.gamma, final.tree.height.lm)
lmem.roundness <- lmer(log.roundness ~ rainfall + (1|landform/tree), data = f.vessels)
beta.glmm.roundness <- glmmTMB(roundess ~ rainfall + (1|landform/tree), data = f.vessels, family = beta_family())
# Compare the models using likelihood ratio test (LRT)
anova(lmem.roundness, beta.glmm.roundness, test = "LRT")
# Print the results
AIC(beta.glmm.roundness, lmem.roundness)
## compare gamma regrassion to linear regression
anova(final.tree.height.lm, height.GLMM.gamma, test = "LRT")
AIC(height.GLMM.gamma)
AIC(height.GLMM.gamma)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = Gamma(link = "log"))
summary(height.GLMM.gamma)
lmem.roundness <- lmer(log.roundness ~ rainfall + (1|tree), data = f.vessels)
beta.glmm.roundness <- glmmTMB(roundess ~ rainfall + (1|tree), data = f.vessels, family = beta_family())
# Compare the models using likelihood ratio test (LRT)
anova(lmem.roundness, beta.glmm.roundness, test = "LRT")
# Print the results
AIC(beta.glmm.roundness, lmem.roundness)
qqnorm(residuals(final.tree.height.lm), pch = 1, frame = FALSE)
qqline(residuals(final.tree.height.lm), col = "steelblue", lwd = 2)
# Compare the models using likelihood ratio test (LRT)
anova(final.tree.height.lm, height.GLMM.gamma, test = "LRT")
# Print the results
AIC(height.GLMM.gamma, final.tree.height.lm)
final.tree.height.lm <- lmer(log(height) ~  rainfall + (1|landform/plots/subplot), data = f.D2H_model, REML = T)
final.tree.height.null <- lmer(log(height) ~ (1|landform/plots/subplot), data = f.D2H_model, REML = T)
anova(final.tree.height.null, final.tree.height.lm, test = "LRT")
final.tree.height.lm <- lmer(log(height) ~  rainfall + (1|plots/subplot), data = f.D2H_model, REML = T)
final.tree.height.null <- lmer(log(height) ~ (1|plots/subplot), data = f.D2H_model, REML = T)
anova(final.tree.height.null, final.tree.height.lm, test = "LRT")
final.tree.height.lm <- lmer(log(height) ~  rainfall + (1|landform/plots/subplot), data = f.D2H_model, REML = T)
final.tree.height.null <- lmer(log(height) ~ (1|landform/plots/subplot), data = f.D2H_model, REML = T)
anova(final.tree.height.null, final.tree.height.lm, test = "LRT")
BIC(height.GLMM.gamma, final.tree.height.lm)
DIC(height.GLMM.gamma, final.tree.height.lm)
AIC(height.GLMM.gamma, final.tree.height.lm)
ggplot(f.D2H_model, aes(height, colour = rainfall)) +
geom_histogram()
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = Gamma(link = "log"))
summary(height.GLMM.gamma)
gamma.height.SimRes <- simulateResiduals(fittedModel  = height.GLMM.gamma)
plot(gamma.height.SimRes)
lmem.roundness <- lmer(log.roundness ~ rainfall + (1|landform/tree), data = f.vessels)
beta.glmm.roundness <- glmmTMB(roundess ~ rainfall + (1|landform/tree), data = f.vessels, family = beta_family())
# Compare the models using likelihood ratio test (LRT)
anova(lmem.roundness, beta.glmm.roundness, test = "LRT")
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = Gamma(link = "log"))
summary(height.GLMM.gamma)
gamma.height.SimRes <- simulateResiduals(fittedModel  = height.GLMM.gamma)
plot(gamma.height.SimRes)
heightvsrainfall <- f.D2H_model%>%
ggplot( aes( rainfall, height, fill = rainfall))+
geom_boxplot(notch = F)+
scale_y_log10()+
ylab("height (cm)")+
xlab(" ")+
ggtitle("e")+
theme_cowplot()+
theme(legend.position = "none")
print(heightvsrainfall)
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = Gamma(link = "log"))
height.GLMM.gamma.null <- glmmTMB(height ~  (1|plots), data = f.D2H_model,family = Gamma(link = "log"))
anova(height.GLMM.gamma.null, height.GLMM.gamma, test = "LRT")
height.GLMM.gamma <- glmmTMB(height ~ rainfall + (1|plots), data = f.D2H_model,family = Gamma(link = "log"))
height.GLMM.gamma.null <- glmmTMB(height ~  (1|plots), data = f.D2H_model,family = Gamma(link = "log"))
anova(height.GLMM.gamma.null, height.GLMM.gamma, test = "Chisq")
beta.glmm.roundness <- glmmTMB(roundess ~ rainfall + (1|landform/tree), data = f.vessels,family = beta_family())
beta.glmm.roundness.null <- glmmTMB(roundess ~ (1|landform/tree), data = f.vessels,family = beta_family())
anova(beta.glmm.roundness, beta.glmm.roundness.null, test = "chisq")
beta.glmm.roundness <- glmmTMB(roundess ~ rainfall + (1|landform/tree), data = f.vessels,family = beta_family())
beta.glmm.roundness.null <- glmmTMB(roundess ~ (1|landform/tree), data = f.vessels,family = beta_family())
anova(beta.glmm.roundness, beta.glmm.roundness.null, test = "LRT")
beta.glmm.roundness <- glmmTMB(roundess ~ rainfall + (1|landform/tree), data = f.vessels,family = beta_family())
beta.glmm.roundness.null <- glmmTMB(roundess ~ (1|landform/tree), data = f.vessels,family = beta_family())
anova(beta.glmm.roundness, beta.glmm.roundness.null, test = "CHia")
beta.glmm.roundness <- glmmTMB(roundess ~ rainfall + (1|landform/tree), data = f.vessels,family = beta_family())
beta.glmm.roundness.null <- glmmTMB(roundess ~ (1|landform/tree), data = f.vessels,family = beta_family())
anova(beta.glmm.roundness, beta.glmm.roundness.null, test = "chisq")
heightvsrainfall <- f.D2H_model%>%
ggplot( aes( rainfall, height, fill = rainfall))+
geom_boxplot(notch = F)+
scale_y_log10()+
ylab("height (cm)")+
xlab(" ")+
ggtitle("e")+
theme_cowplot()+
theme(legend.position = "none")
print(heightvsrainfall)
pairs(emmeans(height.GLMM.gamma, ~ rainfall))
#compare main effects to interactive model
final.plot.height.fit <- lmer(log(height.m2) ~ rainfall + (1|landform/plots), data = plot_D2h, REML = T)
#create subplot level statistics
plot_D2h <- D2H_model%>%
group_by( subplot )%>%
summarise(
sub_plot_area = mean(sub_plot_area),
subplot_density = mean(subplot_density),
ave.basal = mean(basal_area),
diameter = mean(diamiter),
ave.height = mean(height),
tot.basal = sum(basal_area),
tot.height = sum(height),
stem_area = mean(3.1415/4*diamiter^2),
basal.m2 = tot.basal/sub_plot_area,
height.m2 = tot.height/sub_plot_area,
plots = first(plots),
plot_density = mean(plot_density),
rainfall = first(rainfall),
landform = first(landform))%>%
ungroup()%>%
mutate(
logbasal.m2 = log(basal.m2),
log.sub.dens = log(subplot_density))
summary(plot_D2h)
#compare main effects to interactive model
final.plot.basal.fit <- lmer(logbasal.m2 ~ rainfall + (1|landform/plots), data = plot_D2h, REML = T)
summary(final.plot.basal.fit)
qqnorm(residuals(final.plot.basal.fit), pch = 1, frame = FALSE)
qqline(residuals(final.plot.basal.fit), col = "steelblue", lwd = 2)
scatter.smooth(residuals(final.plot.basal.fit) ~ fitted(final.plot.basal.fit))
# Extract the residuals from the model
residuals <- residuals(final.plot.basal.fit)
# Perform the ACF analysis
acf(residuals)
#compare main effects to interactive model
final.plot.height.fit <- lmer(log(height.m2) ~ rainfall + (1|landform/plots), data = plot_D2h, REML = T)
summary(final.plot.height.fit)
qqnorm(residuals(final.plot.height.fit), pch = 1, frame = FALSE)
qqline(residuals(final.plot.height.fit), col = "steelblue", lwd = 2)
scatter.smooth(residuals(final.plot.height.fit) ~ fitted(final.plot.height.fit))
# Extract the residuals from the model
residuals <- residuals(final.plot.height.fit)
# Perform the ACF analysis
acf(residuals)
final.plot.height.fit <- lmer(log(height.m2) ~ rainfall +  (1|landform/plots), data = plot_D2h, REML = F)
final.plot.height.null <- lmer(log(height.m2) ~ (1|landform/plots), data = plot_D2h, REML = F)
anova(final.plot.height.null,final.plot.height.fit,test = "LRT")
#test if we need landform given we have plots as a random effect
nBoot <- 1000
lrStat <- rep(NA, nBoot)
final.plot.height.null <- lmer(log(height.m2) ~ rainfall +  (1|plots), data = plot_D2h, REML = F) #null w/o random effect
final.plot.height.fit <- lmer(log(height.m2) ~  rainfall + (1|landform/plots), data = plot_D2h, REML = F) # full model
lrObs <- 2 * logLik(final.plot.height.fit) - 2 * logLik(final.plot.height.null) # observed test stat
for (iBoot in 1:nBoot)
{
plot_D2h$logHeightSim <- unlist(simulate(final.plot.height.null)) # resampled data
bNull <- lmer(logHeightSim ~ rainfall +  (1|plots), data = plot_D2h, REML = F) # null model
bAlt <- lmer(logHeightSim ~  rainfall + (1|landform/plots), data = plot_D2h, REML = F) # full model
lrStat[iBoot] <- 2 * logLik(bAlt) - 2 * logLik(bNull) # resampled test stat
}
mean(lrStat > lrObs) # P-value for test of landform effect
heightvsrainfall <- f.D2H_model%>%
ggplot( aes( rainfall, height, fill = rainfall))+
geom_boxplot(notch = F)+
scale_y_gamma()+
ylab("height (cm)")+
xlab(" ")+
ggtitle("e")+
theme_cowplot()+
theme(legend.position = "none")
heightvsrainfall <- f.D2H_model%>%
ggplot( aes( rainfall, height, fill = rainfall))+
geom_boxplot(notch = F)+
scale_y_sqrt()+
ylab("height (cm)")+
xlab(" ")+
ggtitle("e")+
theme_cowplot()+
theme(legend.position = "none")
print(heightvsrainfall)
heightvsrainfall <- f.D2H_model%>%
ggplot( aes( rainfall, height, fill = rainfall))+
geom_boxplot(notch = F)+
scale_y_logFC()+
ylab("height (cm)")+
xlab(" ")+
ggtitle("e")+
theme_cowplot()+
theme(legend.position = "none")
print(heightvsrainfall)
heightvsrainfall <- f.D2H_model%>%
ggplot( aes( rainfall, height, fill = rainfall))+
geom_boxplot(notch = F)+
scale_y_log10()+
ylab("height (cm)")+
xlab(" ")+
ggtitle("e")+
theme_cowplot()+
theme(legend.position = "none")
print(heightvsrainfall)
# null vs fit
final.height.basal.aov <- lmer(log(height) ~ log(basal_area) * rainfall + (1|landform/plots/subplot) , data = f.D2H_model, REML = F)
final.height.null <- lmer(log(height) ~ log(basal_area) + (1|landform/plots/subplot), data = f.D2H_model, REML = F)
anova(final.height.null,final.height.basal.aov,test = "LRT")
# null vs fit
final.height.basal.aov <- lmer(log(height) ~ log(basal_area) * rainfall + (1|landform/plots/subplot) , data = f.D2H_model, REML = F)
final.height.null <- lmer(log(height) ~ log(basal_area) + (1|landform/plots/subplot), data = f.D2H_model, REML = F)
anova(final.height.null,final.height.basal.aov,test = LRT)
# null vs fit
final.height.basal.aov <- lmer(log(height) ~ log(basal_area) * rainfall + (1|landform/plots/subplot) , data = f.D2H_model, REML = F)
final.height.null <- lmer(log(height) ~ log(basal_area) + (1|landform/plots/subplot), data = f.D2H_model, REML = F)
anova(final.height.null,final.height.basal.aov,test = "LRT")
